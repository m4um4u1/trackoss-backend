# Server Configuration
server.port=8080

# Application Name (using artifactId)
spring.application.name=trackoss-backend

# Show SQL statements for debugging (optional, but good for development)
spring.jpa.show-sql=true

# Hibernate ddl-auto (update will update the schema if needed, create-drop is good for testing)
# Using 'update' as it's generally safer for development than 'create-drop'
spring.jpa.hibernate.ddl-auto=update

# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/trackossdb
spring.datasource.username=trackoss_user
spring.datasource.password=trackoss_password
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Optional: If PostGIS specific dialect is needed and available from hibernate-spatial for full PostGIS type support.
# For now, PostgreSQLDialect is standard. If specific PostGIS functions/types are used later,
# this might need to be changed to org.hibernate.spatial.dialect.postgis.PostgisDialect or similar.
# For the proxy, this should be sufficient.
# spring.jpa.properties.hibernate.dialect=org.hibernate.spatial.dialect.postgis.PostgisDialect

# Map Tile Proxy Configuration
# This is the base part of the URL for the map provider.
# Example: If your provider gives you a style URL like: https://api.maptiler.com/maps/streets-v2/style.json?key=YOUR_KEY
# And tiles from: https://api.maptiler.com/maps/streets-v2/2/2/1.png?key=YOUR_KEY
# Then set:
maptile.service.target-base-url=https://api.maptiler.com/maps
# The {styleId} in the path will be 'streets-v2', and the proxy will append /style.json or /{z}/{x}/{y}.{format}
# The API key should be passed as a query parameter by the client and will be forwarded by the proxy.

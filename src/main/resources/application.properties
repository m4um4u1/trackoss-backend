# Server Configuration
server.port=8080

# Application Name (using artifactId)
spring.application.name=trackoss-backend

# Spring Boot Logging
logging.level.org.springframework.web=debug

# Show SQL statements for debugging (optional, but good for development)
spring.jpa.show-sql=true

# Hibernate ddl-auto (update will update the schema if needed, create-drop is good for testing)
# Using 'update' as it's generally safer for development than 'create-drop'
spring.jpa.hibernate.ddl-auto=update

# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/trackossdb
spring.datasource.username=trackoss_user
spring.datasource.password=trackoss_password
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection pool settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000

# PostGIS spatial dialect for geographic data support
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Map Tile Proxy Configuration
# This is the base part of the URL for the map provider.
# Example: If your provider gives you a style URL like: https://api.maptiler.com/maps/streets-v2/style.json?key=YOUR_KEY
# And tiles from: https://api.maptiler.com/maps/streets-v2/2/2/1.png?key=YOUR_KEY
# Then set:
maptile.service.target-base-url=https://api.maptiler.com/maps
maptile.service.api.key=${MAPTILE_SERVICE_API_KEY:dummy_key}
# The {styleId} in the path will be 'streets-v2', and the proxy will append /style.json or /{z}/{x}/{y}.{format}
# The API key should be passed as a query parameter by the client and will be forwarded by the proxy.


# OpenAPI/Swagger Configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.tryItOutEnabled=true
